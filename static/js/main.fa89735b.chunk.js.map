{"version":3,"sources":["static-data.js","constants/action-types.js","reducers/contacts.js","reducers/index.js","reducers/user.js","reducers/typing.js","reducers/messages.js","reducers/activeUserId.js","store/index.js","containers/User.js","actions/index.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","containers/MessageInput.js","components/ChatWindow.js","components/Main.js","containers/App.js","index.js","reportWebVitals.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","status","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","reducer","state","combineReducers","typing","action","type","payload","message","userId","allUserMsgs","keys","pop","activeUserId","store","createStore","User","className","onClick","dispatch","id","bind","size","Sidebar","map","contact","Empty","firstName","split","Header","Chat","Chats","chatsRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","useMemo","values","Main","App","render","console","log","ReactDOM","document","getElementById","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals","subscribe"],"mappings":"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","file":"static/js/main.fa89735b.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = (messagesPerUser) => {\r\n  let messages = {};\r\n  _.forEach(users, (user) => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\"),\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null,\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate(),\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean(),\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n","import { contacts } from \"../static-data\";\r\n\r\nconst reducer = (state = contacts, action) => {\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport user from \"./user\";\r\nimport typing from \"./typing\";\r\nimport contacts from \"./contacts\";\r\nimport messages from \"./messages\";\r\nimport activeUserId from \"./activeUserId\";\r\n\r\nexport default combineReducers({\r\n  user,\r\n  typing,\r\n  contacts,\r\n  messages,\r\n  activeUserId,\r\n});\r\n","import { generateUser } from \"../static-data\";\r\n\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}\r\n","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_TYPING_VALUE:\r\n      return action.payload;\r\n    case SEND_MESSAGE:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from \"lodash\";\r\nimport { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport default function user(state = getMessages(10), action) {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const { message, userId } = action.payload;\r\n      const allUserMsgs = state[userId];\r\n      const number = +_.keys(allUserMsgs).pop() + 1;\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [number]: {\r\n            number,\r\n            text: message,\r\n            is_user_msg: true,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Avatar from \"react-avatar\";\r\n\r\nimport store from \"../store\";\r\nimport { setActiveUserId } from \"../actions\";\r\n\r\nimport \"./User.css\";\r\n\r\nconst User = ({ user }) => {\r\n  const { name, status } = user;\r\n\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <Avatar name={name} className=\"User__pic\" size={50} />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function handleUserClick({ user_id }) {\r\n    store.dispatch(setActiveUserId(user_id));\r\n  }\r\n};\r\n\r\nexport default User;\r\n","import {\r\n  SET_ACTIVE_USER_ID,\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE,\r\n} from \"../constants/action-types\";\r\n\r\nexport const setActiveUserId = (id) => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id,\r\n});\r\n\r\nexport const setTypingValue = (value) => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value,\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: { message, userId },\r\n});\r\n","import User from \"../containers/User\";\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map((contact) => (\r\n        <User user={contact} key={contact.user_id} />\r\n      ))}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport Avatar from \"react-avatar\";\r\n\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n  const { name, status } = user;\r\n  const firstName = name.split(\" \")[0];\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {firstName}</h1>\r\n      <Avatar name={name} className=\"Empty__img\" size={100} />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a Conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ user }) => {\r\n  const { name, status } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"./Chats.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nconst Chats = ({ messages }) => {\r\n  const chatsRef = useRef();\r\n  useEffect(() => {\r\n    const scrollToBottom = () =>\r\n      (chatsRef.current.scrollTop = chatsRef.current.scrollHeight);\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"Chats\" ref={chatsRef}>\r\n      {messages.map((message) => (\r\n        <Chat message={message} key={message.number} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../actions\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n  const state = store.getState();\r\n\r\n  const handleChange = (e) => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { typing, activeUserId } = state;\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n    \r\n  };\r\n\r\n  return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"Message__input\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        placeholder=\"Write a Message...\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\nexport default MessageInput;\r\n","import React, { useMemo } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport Header from \"./Header\";\r\nimport Chats from \"./Chats\";\r\nimport MessageInput from \"../containers/MessageInput\";\r\n\r\nimport store from \"../store\";\r\nimport \"./ChatWindow.css\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const activeUser = state.contacts[activeUserId];\r\n  const activeMsgs = useMemo(() => state.messages[activeUserId], [\r\n    state,\r\n    activeUserId,\r\n  ]);\r\n  const messages = useMemo(() => _.values(activeMsgs), [activeMsgs]);\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={messages} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\n\r\nimport Empty from \"../components/Empty\";\r\nimport ChatWindow from \"../components/ChatWindow\";\r\n\r\nimport \"./Main.css\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  const renderMainContent = () => {\r\n    if (!activeUserId) {\r\n      return <Empty user={user} activeUserId={activeUserId} />;\r\n    } else {\r\n      return <ChatWindow activeUserId={activeUserId} />;\r\n    }\r\n  };\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport _ from \"lodash\";\nimport \"../static-data\";\nimport store from \"../store\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nconst render = () => {\n  console.log(\"%c Rendered with � � � \", \"background: purple; color:#fff\");\n  console.log(store.getState());\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nstore.subscribe(render);\nrender();\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}